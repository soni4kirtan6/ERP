@page
@model ConfigPortal.Pages.ValidationPageModel
@{
    ViewData["Title"] = "ValidationPage";
}

<div class="name" style="font-size:23px; color:#736AFF; font-weight:bold; text-align:center;">2) Add Validation to each Field</div>
<form method="POST" name="tableMappingForm">
    @foreach (var table in Model.dbstructure.Properties())
    {
        string tableName = table.Name.ToString();
        <h2>Table : @table.Name</h2>
        <table class="table">
            <thead>
                <tr>
                    <th scope="col"><h3>Column Name</h3></th>
                    <th scope="col">Validation Configurations</th>
                </tr>
            </thead>
            @foreach (var col in table.Value)
            {
                //int i = 0;

                string colName=col.ToString();
                <tbody>
                    <tr>
                        <th scope="row">@colName</th>
                        <td>
                            <div>
                                
                                <div class="validation" id="@tableName-@colName-0">
                                    <h4 class="val-no" id="val_no-@tableName-@colName-0" name="val_no-@tableName-@colName-0">Validation 1:</h4><br />

                                    <label>Type of Validation:</label>

                                    <select class="form-control type-sel" id="type_sel-@tableName-@colName-0" name="type_sel-@tableName-@colName-0">
                                        <option>CanBeEmpty</option>
                                        @*true false*@
                                        <option>Maxlength</option>
                                        @*numeric*@
                                        <option>MinLength</option>
                                        @*Nymeric*@
                                        <option>RegEx</option>
                                        @*Drop down, and if customRegEx selected than text*@
                                        <option>Static List</option>
                                        @*Multiple entries seperated by ; or some delimeter*@
                                    </select>
                                    <br />
                                    <label>Value :</label>
                                    <input class="form-control valu-" placeholder="Enter Value" type="text" id="value-@tableName-@colName-0" name="value-@tableName-@colName-0"><br />
                                    <label>ErrorOrWarning :</label>
                                    @*<input class="form-control e-w" placeholder="e/w" type="radio" id="E_W-@tableName-@colName-0" name="E_W-@tableName-@colName-0"><br />*@
                                    
                                    <label class="radio-inline"><input type="radio" id="E_W-@tableName-@colName-0" name="E_W-@tableName-@colName-0" value="e" checked>Error</label>
                                    <label class="radio-inline"><input type="radio" id="E_W-@tableName-@colName-0" name="E_W-@tableName-@colName-0" value="w">Warning</label>
                                    <br />
                                </div>
                            </div>
                            <input type="hidden" class="hidden-count" id="count-@tableName-@colName" name="count-@tableName-@colName">
                            <button class="btn btn-info" type="button" onclick="duplicate('@tableName-@colName')">ADD ONE MORE</button>
                        </td>
                    </tr>
                </tbody>
            }
        </table>
    }
    <div>
        <button class="btn btn-success" type="submit" asp-page="#">Save & Next</button>
        @*<label class="label--desc" style="margin-top:10px; margin-left:25px" asp-for="ConStr">@Model.ConStr</label>*@
    </div>
</form>

<script>
    //var i = 0;
    var colCount = {};
    window.onload=function () {
        var hiddenCounts = document.getElementsByClassName("hidden-count");
        
        for (var i = 0; i < hiddenCounts.length; i++) {
            hiddenCounts[i].value = 1;
            //alert(hiddenCounts[i].value);
        }
        var ew = document.getElementsByClassName("e-w");
        //alert(ew.length);
        for (var i = 0; i < ew.length; i++) {
            ew[i].value = "e";
            //alert(ew[i].value);
        }

        var val = document.getElementsByClassName("valu-");
        //alert(ew.length);
        for (var i = 0; i < val.length; i++) {
            val[i].value = "false";
            //alert(ew[i].value);
        }
    };
    function duplicate(col) {
        if (colCount[col] == undefined) {
            colCount[col] = 0;
        }
            //alert(colCount[col]);
        var original = document.getElementById(col + "-" + colCount[col]);
        var clone = original.cloneNode(true); // "deep" clone

        var valNo = clone.getElementsByClassName("val-no")[0];
        var typeSel = clone.getElementsByClassName("type-sel")[0];
        var value = clone.getElementsByClassName("valu-")[0];
        var e_w = clone.getElementsByClassName("e-w")[0];

        colCount[col] = colCount[col] + 1;




        typeSel.setAttribute("name",(typeSel.id));
        value.setAttribute("name",(value.id));
        e_w.setAttribute("name",(e_w.id));

        //alert(value);
        clone.onclick = duplicate; // event handlers are not cloned
        original.parentNode.appendChild(clone);
        var hiddenCount = document.getElementById("count-" + col);
        //alert(hiddenCount);
        hiddenCount.value = colCount[col]+1;
        //alert(hiddenCount.value + ":" + colCount[col]);
    }
</script>